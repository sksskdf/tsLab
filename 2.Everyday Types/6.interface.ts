/*
인터페이스
인터페이스 선언은 객체 타입을 만드는 또 다른 방법이다.
*/

interface Point2 {
    x: number;
    y: number;
}

function printCoord2(pt: Point2) {
    console.log(pt.x);
    console.log(pt.y);
}

printCoord2({ x: 100, y: 200 });

/*
타입 별칭을 사용한 경우와 마찬가지로, 위 예시 코드는 마치 타입이 없는 임의의 익명 객체를 사용하는 것처럼 동작한다.
TypeScript는 오직 printCoord에 전달된 값의 구조에만 관심을 가진다.
즉, 예측된 프로퍼티를 가졌는지 여부만을 따진다.
이처럼, 타입이 가지는 구조와 능력에만 관심을 가진다는 점은 TypeScript가 구조적 타입 시스템이라고 불리는 이유이다.
*/

/*
타입 별칭과 인터페이스는 매우 유사하며, 대부분의 경우 둘 중 하나를 자유롭게 선택하여 사용할 수 있다.
interface가 가지는 대부분의 기능은 type에서도 동일하게 사용 가능하다.
이 둘의 가장 핵심적인 차이는, 타입은 새 프로퍼티를 추가하도록 개방될 수 없는 반면, 인터페이스의 경우 항상 확장될 수 있다는 점이다.
*/